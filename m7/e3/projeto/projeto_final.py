# -*- coding: utf-8 -*-
"""projeto_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YBplW9BVxtRTkZTctqpz-8TzxY3SMAyM
"""

from sklearn.datasets import load_wine
import matplotlib.pyplot as plt

wine = load_wine()
y = wine.target

# splitting into train and test datasets
from sklearn.model_selection import train_test_split
# datasets = train_test_split(wine.data, wine.target, test_size=0.2, random_state=1, stratify=y)
datasets = train_test_split(wine.data, wine.target, test_size=0.2)
train_data, test_data, train_labels, test_labels = datasets

# scaling the data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

# we fit the train data
scaler.fit(train_data)

# scaling the train data
train_data = scaler.transform(train_data)
test_data = scaler.transform(test_data)

# Training the Model
from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(10, 5), max_iter=10000, learning_rate_init=0.01)

# let's fit the training data to our model
mlp.fit(train_data, train_labels)

print('Número de épocas: ', mlp.n_iter_)
# print('Taxa de aprendizagem: ', mlp.alpha)

# mlp.loss curve

print(len(mlp.loss_curve_))
x = list(range(0, len(mlp.loss_curve_)))
y = mlp.loss_curve_
plt.xlabel('Época')
plt.ylabel('Erro')
plt.plot(x, y)
plt.show()

# accuracy

from sklearn.metrics import accuracy_score

predictions_train = mlp.predict(train_data)
print('\nAcurácia dos dados de treino: ', accuracy_score(predictions_train, train_labels))
predictions_test = mlp.predict(test_data)
print('Acurácia dos dados de teste: ', accuracy_score(predictions_test, test_labels))

print('\nPrevisões sobre os dados de treino: \n', predictions_train)
print('Previsões sobre os dados de teste: \n', predictions_test)

from sklearn.metrics import confusion_matrix

conf_treino = confusion_matrix(predictions_train, train_labels)
print('\nMatriz de confusão dos dados de treino: \n', conf_treino)

conf_test = confusion_matrix(predictions_test, test_labels)
print('Matriz de confusão dos dados de teste: \n', conf_test)

from sklearn.metrics import classification_report

print('\nRelatório de classificação dos dados de treino: \n\n', classification_report(predictions_train, train_labels))
print('Relatório de classificação dos dados de teste: \n\n', classification_report(predictions_test, test_labels))